syntax = "proto3";

import "google/protobuf/empty.proto";
package namespace_proto;

message LogInData{
  string name = 1;
  string password = 2;
}

message User{
  int32 id = 1;
  int32 rate = 2;
  string name = 3;
}

message Unit{
  int32 id_unit = 2;
  int32 id_hero = 5;
  int32 is_selected = 6;
  int32 type_unit = 1;
  int32 amount_unit = 3;
  int32 sum_of_health = 4;
  int32 damage = 10;
  int32 attack_range = 7;
  int32 movement_range = 8;
  int32 weight = 9;
}

message Cell{
  int32 row = 1;
  int32 column = 2;
  Unit unit = 3;
  int32 durability = 4;
  bool is_unit = 5;
  bool is_attack = 6;
}

message EnableCell{
  repeated Cell cells = 1;
}

message UserState{
  int32 game_id = 1;
  User user = 2;
  int32 hero_id = 3;
  bool is_single = 4;
}

message GameIdAndHero{
  int32 game_id = 1;
  int32 position_in_call_queue = 2;
}

message MoveSelectUnit{
  Cell unit = 1;
  UserState user = 2;
}

message MoveFromTo{
  Cell start = 1;
  Cell finish = 2;
  UserState user = 3;
}

message GameState{
  int32 game_id = 1;
  int32 first_user = 2;
  int32 first_user_mana = 6;
  int32 second_user = 3;
  int32 second_user_mana = 7;
  int32 move_turn = 5;
  repeated Cell game_cells = 4;
}

message EnableCells{
  repeated Cell enable_cells = 1;
}

message Spell{
  int32 id = 1;
  string name = 2;
  string description = 3;
  int32 mana = 4;
}

message SelectSpellRequest{
  UserState user = 1;
  int32 spell_id = 2;}

message DoSpellRequest{
  UserState user = 1;
  int32 spell_id = 2;
  Cell cell = 3;
}

message Hero{
  int32 type = 1;
  string name = 3;
  repeated Spell spells = 2;
}

service Server {
  rpc SignUp(LogInData) returns(User) {}
  rpc LogIn(LogInData) returns(User) {}
  rpc GetHero(google.protobuf.Empty) returns(Hero) {}
  rpc GetOpponent(UserState) returns(Hero) {}
  rpc CallServer(UserState) returns(stream GameState) {}
  rpc AddToLobby(User) returns(GameIdAndHero) {}

  rpc SwitchTurn(UserState) returns(GameState) {}
  rpc EndSession(UserState) returns(google.protobuf.Empty) {}


  rpc MoveUnit(MoveFromTo) returns(GameState) {}
  rpc SelectUnit(MoveSelectUnit) returns(EnableCell) {}

  rpc SelectSpell(SelectSpellRequest) returns(EnableCell) {}
  rpc DoSpell(DoSpellRequest) returns(GameState) {}
}
